waterfall pattern tab hota hai jab kuch data fetching operations ek dusre par dependent hote hain. Matlab, tum tab tak next operation nahi kar sakte jab tak pehla wala resolve na ho jaye. Is case mein **async/await** ka use karte hain taki JavaScript ki asynchronous nature ko control karke operations ko sequence mein chala sakein.

### Waterfall Example:
Maan lo tum ek Next.js page bana rahe ho jisme pehle tumhe **user details** fetch karni hai, aur uske baad hi tum **user ke posts** ko fetch kar sakte ho. Tum posts tab tak fetch nahi kar sakte jab tak user ki details available nahi hoti. Yeh waterfall pattern ka ek simple example hai.

### Example Code:
```js
export async function getServerSideProps() {
  // Sabse pehle, user details fetch karo
  const resUser = await fetch('https://api.example.com/user');
  const user = await resUser.json();

  // User details fetch hone ke baad hi, uske posts fetch karo
  const resPosts = await fetch(`https://api.example.com/posts?userId=${user.id}`);
  const posts = await resPosts.json();

  return { props: { user, posts } };
}
```

### Waterfall Pattern ka Matlab:
- **Dependency**: Doosra request (user ke posts fetch karna) pehle wale request (user details fetch karna) par dependent hai.
- **Sequential Execution**: Operations ko ek strict sequence mein chalana zaroori hai kyunki tumhe pehle user ki details chahiye hoti hain taki tum sahi posts ko fetch kar sako.
- **Error Handling**: Agar tum pehle user details fetch kiye bina posts ko fetch karne ki koshish karoge, toh API samajh nahi paayegi ki tum kis user ke posts fetch karna chahte ho, aur error aa sakti hai.

Yeh waterfall approach ensure karta hai ki data fetching ek controlled order mein hoti hai, aur **async/await** isme help karta hai. Asynchronous code ko yeh zyada readable aur synchronous-looking structure mein convert karta hai, jo sequence-dependent operations ko asaani se handle karta hai.

### `async/await` ka use kyun karte hain?
- **Callback Hell avoid karne ke liye**: `async/await` ka use deeply nested callbacks ko avoid karta hai.
- **Code readable hota hai**: Yeh asynchronous code ko padhne aur maintain karne mein asaan bana deta hai.
- **Order maintain karta hai**: Yeh ensure karta hai ki doosra API call (posts ke liye) tab tak na ho jab tak pehla API call (user details ke liye) complete na ho, isse tum error avoid kar sakte ho.

Isliye tum `async/await` ka use karte ho, taaki JavaScript ki asynchronous nature ko control kar pao aur operations ko correct order mein chalake dependent data fetching kar pao.